services:
  zookeeper:
    image: debezium/zookeeper:2.4
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Auto-create topics
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  kafka-create-topics:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        until kafka-topics --bootstrap-server kafka:9092 --list; do
          echo 'Kafka is not ready yet, waiting...'
          sleep 2
        done &&
        echo 'Kafka is ready, creating topics...' &&
        kafka-topics --create --topic turknet.transformers.message.commands.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.message.commands.retry.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.user.commands.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.user.commands.retry.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.session.commands.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.session.commands.retry.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        echo 'All Kafka topics created successfully' &&
        kafka-topics --bootstrap-server kafka:9092 --list
      "
    restart: "no"

  mongodb:
    image: mongo:8.0.12
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: turknet-messaging-db
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb

  messaging-command-service:
    image: messaging-command-service:latest
    depends_on:
      - kafka
      - mongodb
      - kafka-create-topics
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped

  messaging-consumer:
    image: messaging-consumer:latest
    depends_on:
      - kafka
      - mongodb
      - kafka-create-topics
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
