services:
  zookeeper:
    image: debezium/zookeeper:2.4
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Auto-create topics
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: docker
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  kafka-create-topics:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        until kafka-topics --bootstrap-server kafka:9092 --list; do
          echo 'Kafka is not ready yet, waiting...'
          sleep 2
        done &&
        echo 'Kafka is ready, creating topics...' &&
        kafka-topics --create --topic turknet.transformers.message.commands.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.message.commands.retry.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.user.commands.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.user.commands.retry.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.session.commands.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        kafka-topics --create --topic turknet.transformers.session.commands.retry.0 --if-not-exists --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1 &&
        echo 'All Kafka topics created successfully' &&
        kafka-topics --bootstrap-server kafka:9092 --list
      "
    restart: "no"

  mongodb:
    image: mongo:8.0.12
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: turknet-messaging-db
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - cluster.name=turknet-messaging-cluster
      - node.name=es-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    depends_on:
      - elasticsearch

  kibana-setup:
    image: alpine/curl:latest
    container_name: kibana-setup
    depends_on:
      - kibana
      - elasticsearch
    command: 
      - sh
      - -c
      - |
        echo 'Waiting for Kibana to be ready...'
        until curl -s http://kibana:5601/api/status | grep -q '"overall":{"level":"available"'; do
          echo 'Kibana is not ready yet, waiting...'
          sleep 5
        done
        echo 'Kibana is ready, creating index patterns...'
        
        echo 'Creating turknet-messaging-logs index pattern...'
        curl -X POST \
          "http://kibana:5601/api/saved_objects/index-pattern/turknet-messaging-logs" \
          --header "kbn-xsrf: true" \
          --header "Content-Type: application/json" \
          --data \
          '{
            "attributes": {
              "title": "turknet-messaging-logs*",
              "timeFieldName": "@timestamp"
            }
          }'
        
        echo 'Creating turknet-messaging-graphql-logs index pattern...'
        curl -X POST \
          "http://kibana:5601/api/saved_objects/index-pattern/turknet-messaging-graphql-logs" \
          --header "kbn-xsrf: true" \
          --header "Content-Type: application/json" \
          --data \
          '{
            "attributes": {
              "title": "turknet-messaging-graphql-logs*",
              "timeFieldName": "@timestamp"
            }
          }'
        
        echo 'Index patterns created successfully!'
    restart: "no"

  messaging-command-service:
    image: messaging-command-service:latest
    depends_on:
      - kafka
      - mongodb
      - elasticsearch
      - kafka-create-topics
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped

  messaging-consumer:
    image: messaging-consumer:latest
    depends_on:
      - kafka
      - mongodb
      - elasticsearch
      - kafka-create-topics
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped

  graphql-middleware:
    build:
      context: ./graphql-middleware
      dockerfile: Dockerfile
    depends_on:
      - messaging-command-service
      - elasticsearch
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - REST_API_BASE_URL=http://messaging-command-service:8080
      - REST_API_TIMEOUT=30000
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - CORS_ORIGIN=*
      - CORS_CREDENTIALS=true
      - GRAPHQL_PLAYGROUND=true
      - GRAPHQL_INTROSPECTION=true
      - GRAPHQL_DEBUG=false
      - ELASTICSEARCH_ENABLED=true
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  elasticsearch-data:
    driver: local
